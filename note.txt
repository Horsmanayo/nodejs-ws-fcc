const amount= 12

if(amount < 10){
    console.log('hi');
}else{
    console.log('hey')
}

console.log('hey its my first note app'

**********************************************

Global  - no window

__dirname - path to current directory

__filename - file name

require - function to use modules(CommonJS)

module - infor about current module (file)

process - infor about env where the program is being executed

***************************************************************************

// Modules - Encapsulated code 
// every file in node is a module 

const {john, peter} = require('./firstModule')
const sayHi =  require('./secondModule-utils')
const data = require('./3rd-flavor')
require('./4th-ming-grenade')

*******************************************************************************************************

USING THE OS MODULE

const os = require('os')

//info about current user 
const user = os.userInfo()

console.log(user)

//method returns the system uptime in seconds

console.log(`The system uptime is ${os.uptime() * 60} minutes`);

const currentOs = {
    name: os.type(),
    release: os.release(),
    totalMem: os.totalmem(),
    freeMemory: os.freemem(),
}

console.log(currentOs);

******************************************************************************************************


USING THE PATH MODULE

const path = require('path')

console.log(path.sep)

const filePath = path.join('/content', 'subfolder', 'test.txt')

console.log(filePath)

const base = path.basename(filePath)

console.log(base);

const absolute = path.resolve(__dirname, 'content', 'subfolder', 'test.txt')

console.log(absolute);


*****************************************************************************************************

USING THE readFileSync TO READ A FILE, AND USING THE writeFileSync TO CREATE A FILE OR APPEND AN EXISTING DATA IN A FILE
(SYNCHRONOUS CALL)

const {readFileSync, writeFileSync} = require('fs')

const first = readFileSync('./content/text.txt', 'utf8')
const second = readFileSync('./content/subfolder/test.txt', 'utf8')

console.log(first, second)

const third = writeFileSync(
    './content/third.txt', 
    'How are you doing today', 
    { flag: 'a'}
)

IN THIS CASE, EVERY TASK GOES SYNCHRONOUSLY, WHICH MEANS THEY RUN AFTER THE FIRST ONE COMPLETES

THE THIRD PARAMETER WITH THE FLAG A DUPLICATES THE DATA IN A FILE 

************************************************************************************************************

ASYNSCHRONOUS USE OF writeFile and readFileSync

const {readFile, writeFile} = require('fs')

readFile('./content/text.txt', 'utf8', (err, result) => {
    if(err){
        console.log(err);
        return
    } 
    const firstTxt = result
    readFile('./content/subfolder/test.txt', 'utf8', (err, result)=> {
        if(err){
            console.log(err);
            return
        } 
        const secondTxt = result
        writeFile(
            './content/async-result.txt', 
            `Here is the result: ${firstTxt, secondTxt}`
        ,(err, result) => {
            if(err){
                console.log(err);
                return
            }
            console.log(result);
        })
    })
})

IN THIS CASE, A TASK EXECUTE AND OFFLOADS FOR THE NEXT TASK TO RUN, WHICH MEANS THEY RUN SIMULTANEOUSLY WITHOUT A TASK STOPPING THE OTHER FROM RUNNNING


****************************************************************************************

SETTING UP THE HTTP MODULE 

const http = require('http')


const server = http.createServer((req, res) => {
    if(req.url === '/'){
        res.end('Welcome to our homepage')
    }
    if(req.url === '/about'){
        res.end('A brief history about our company')
    }
    res.end(
        ` 
            <h1>Oops!</h1>
            <p>We cant seem to find the page you are looking for</p>
            <a href='/'>Back home</a>
        `
    )
}).listen(5000)

*********************************************************************************

EXPLANATION ON ASYNSCHRONOUS CALLBACK FUNCTIONS, AND HOW IT OFFLOADS AFTER CHECKING FOR OTHER CODES THAT NEEDS IMMEDIATE EXECUTION
console.log('first task');

setTimeout(() => {
    console.log('second task')
}, 0)

console.log('third task')

THE DIFFERENCE BETWEEN setTimeout and setInterval  IS THE SECOND PARAMETER FOR setTimeout
MAKES THE FUNCTION RUN AFTER THE SET TIME FRAME, WHILE THE setInterval RUNS ON EVERY COUNT OF THE SECOND PARAMETER

******************************************************************************************
WAY ONE AND TWO OF USING PROMISES IN NODE 


const { readFile, writeFile } = require('fs') 
const util = require('util')
const readFilePromise = util.promisify(readFile)
const writeFilePromise = util.promisify(writeFile)


const start = async() => {
    try{
        const first = await readFilePromise('./content/text.txt', 'utf8')
        const second = await readFilePromise('./content/subfolder/test.txt', 'utf8')
        await writeFilePromise('./content/result-mind.txt', `This is awesome: ${first}, ${second}`)
        console.log(first, second);
    }catch (error){
        console.log(error );
    }
}



start()



// const getText = (path) => {
//     return new Promise((resolve, reject)=> {
//         readFile(path, 'utf8', (err, data) => {
//             if(err){
//                 reject(err)
//             }else {
//                 resolve (data)
//             }
            
//         })
//     })
// }

// getText('./content/text.txt')
//     .then(result => console.log(result))
//     .catch(err => console.log(err))

*********************************************************************************************

THIRD WAY OF USING PROMISES

const { readFile, writeFile } = require('fs').promises 

const start = async() => {
    try{
        const first = await readFile('./content/text.txt', 'utf8')
        const second = await readFile('./content/subfolder/test.txt', 'utf8')
        await writeFile('./content/result-mind.txt', `This is awesome: ${first}, ${second}`)
        console.log(first, second);
    }catch (error){
        console.log(error );
    }
}



start()

************************************************************************************************

USING THE EVENT EMITTER, CREATING A NEW INSTANCE OF EMITTER

const EventEmitter = require('events')

const customEmitter = new EventEmitter()

customEmitter.on('response', (name, id) => {
    console.log(`data received name: ${name}, id: ${id}`);
})

customEmitter.on('response', () => {
    console.log(`some other logic here`);
})

customEmitter.emit('response', 'john', 34)

**************************************************************************************************************
EXPLAINING HOW EVENT EMITTER IS AN UNDERGROUND FUNCTION IN MOST OF NODE MODULES USING HTTP 

const http = require('http')

const server = http.createServer()

server.on('request', (req, res) => {
    res.end('Welcome to our homepage')
})

server.listen(5000)

***************************************************************************************************************


